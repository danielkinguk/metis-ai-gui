docs:
  supported_extensions:  [".md", ".html", ".txt", ".pdf", ".rst"]

general_prompts:
  retrieve_context: |-
    You are a senior software engineer and your task is to explain what the following FILE does and what its purpose is.
    Include any data flows, function calls, or dependencies that could impact security.
    FILE: {file_path}
  security_review_report: |-
    3. How to Report
        - List all identified security issues in a JSON array.
        - Each element of the array must be a JSON object inside a list under the \"reviews\"key, with the following keys:
          - \"issue\": A short description of the vulnerability.
          - \"code_snippet\": The exact lines of code that exibit this vulnerability. This field should only contain code found in the file.
          - \"reasoning\": A detailed explanation of why you identified this as a vulnerability.
          - \"mitigation\": A recommended approach or fix to resolve the issue.
          - \"confidence\": A float between 0 and 1 indicating your confidence in the finding.
          - If there is any contradiction in the code comments or patch notes (e.g., something claims there is 'no new risk'
            while concurrency checks are removed), add an 'explanation' key to detail the contradiction.
        - IMPORTANT: If no identified security issues are found, return: {\"reviews\": []}

plugins:
  c:
    supported_extensions: [".c", ".cpp", ".h", ".hpp", ".cc"]
    splitting:
      chunk_lines: 40
      chunk_lines_overlap: 15
      max_chars: 1500
    prompts:
      security_review_file: |-
        You are a thorough security engineer specializing in C/C++.
        Always tie your identified issues directly to the evidence in FILE and RELEVANT_CONTEXT.
        Do not introduce new security conclusions that are not supported by the specific changes or context provided.
        You will be given:
        1. FILE - A source code file
        2. RELEVANT_CONTEXT - information about what these changes do.

        Your tasks are:
        1. Security Review Scope
           - Review the security implications of the FILE.
        If it is empty, ignore it.
      security_review: |-
        You are a thorough security engineer specializing in C/C++.
        Always tie your identified issues directly to the evidence in FILE_CHANGES, RELEVANT_CONTEXT,
        and ORIGINAL_FILE. Do not introduce new security conclusions that are not supported
        by the specific changes or context provided.
        You will be given:
        1. FILE_CHANGES - a set of code changes with lines marked by “+” indicating what has been added or “-” for modified.
        2. RELEVANT_CONTEXT - information about what these changes do.
        3. ORIGINAL_FILE - The original file before being modified. Use this to understand how changes affect the code. (this may be empty).

        Your tasks are:
        1. Security Review Scope
           - Review the security implications of the FILE_CHANGES, focusing on lines marked with “+.” or “-” but take into account how they interact with the whole file.
        If it is empty, ignore it.
      security_review_checks: |-
        2. What to Check
           - Look for potential security issues such as:
             - Memory safety issues
             - Memory aliasing issues
             - Buffer overflows
             - Unsafe function usage
             - Integer overflows
             - Integer underflows
             - Injection vulnerabilities
             - Concurrency issues
               + Specifically watch for removed wait calls or altered synchronization paths
                 that may lead to race conditions or use-after-free.
             - Use of insecure functions
             - Null pointer dereference
             - Use after free
               + Pay special attention to scenarios where an object is freed or a resource is terminated
                 while a job, firmware thread, or callback is still referencing it.
           - IMPORTANT: If the code already checks that pointers are non-null or logically ensures they cannot be null, do not raise a 'null pointer dereference' issue.
           - Do not report on issues that do not affect security.
      validation_review: |-
        You will be given:
        SNIPPET: The relevant C/C++ code snippet.
        RELEVANT CONTEXT: Additional details or commentary on the snippet.
        REVIEW: A list of potential security issues discovered in the code changes.

        Your task is to:
        1. Carefully examine each item in the REVIEW. Check if it's a genuine security concern by referencing the SNIPPET and RELEVANT CONTEXT.
        2. Remove any issues that are false positives or are already mitigated in the code (e.g., null checks exist, safe boundaries are enforced, etc.).
        3. Keep only the issues that definitely represent real security risks.
        4. If an issue is missing details, add the necessary clarifications or background.
        5. If no real issues remain after validation, respond with an empty array: [].
      snippet_security_summary: |-
        You are a thorough security engineer specializing in C/C++.
        You will be given a concatenated list all identified security issues that have been identified in a code review.
        Summarize all the issues in a single paragraph and explain what changed in the code patch and how it affects security.
      attempt_fix: |-
        You are an experienced software engineer specializing in secure coding. Based on the following identified security issues:\n
        {issues}\n
        and the patch file:\n
        {patch}\n
        Please update the patch file so that is fixes these vulnerabilities.
        Do not include any commentary—only output the patch diff.
  python:
    supported_extensions: [".py"]
    splitting:
      chunk_lines: 40
      chunk_lines_overlap: 15
      max_chars: 1500
    prompts:
      security_review: |-
        You are a thorough security engineer specializing in Python.
        Always tie your identified issues directly to the evidence in FILE_CHANGES, RELEVANT_CONTEXT,
        and ORIGINAL_FILE. Do not introduce new security conclusions that are not supported
        by the specific changes or context provided.
        You will be given:
        1. FILE_CHANGES - a set of code changes with lines marked by “+” indicating what has been added or “-” for modified.
        2. RELEVANT_CONTEXT - information about what these changes do.
        3. ORIGINAL_FILE - The original file before being modified. Use this to understand how changes affect the code. (this may be empty).

        Your tasks are:
        1. Security Review Scope
           - Review the security implications of the FILE_CHANGES, focusing on lines marked with “+.” or “-” but take into account how they interact with the whole file.
        If it is empty, ignore it.
      security_review_checks: |-
        2. What to Check
           - Look for potential security issues such as:
             - OWASP Top 10 vulnerabilities
             - Hardcoded secrets
             - Insecure use of libraries
           - Do not report on issues that do not affect security.
      validation_review: "Validate the following Python review for security concerns."
      snippet_security_summary: "Summarize the security implications of these Python code changes."
      attempt_fix: "Based on the issues detected in the Python code changes, propose a fix patch. Issues: {issues} Patch: {patch}"
      security_review_file: |-
        You are a thorough security engineer specializing in Python.
        Always tie your identified issues directly to the evidence in FILE and RELEVANT_CONTEXT.
        Do not introduce new security conclusions that are not supported by the specific changes or context provided.
        You will be given:
        1. FILE - A source code file
        2. RELEVANT_CONTEXT - information about what these changes do.

        Your tasks are:
        1. Security Review Scope
           - Review the security implications of the FILE.
        If it is empty, ignore it.
  rust:
    supported_extensions: [".rs", ".rlib"]
    splitting:
      chunk_lines: 40
      chunk_lines_overlap: 15
      max_chars: 1500
    prompts:
      security_review: |-
        You are a thorough security engineer specializing in Rust.
        Always tie your identified issues directly to the evidence in FILE_CHANGES, RELEVANT_CONTEXT,
        and ORIGINAL_FILE. Do not introduce new security conclusions that are not supported
        by the specific changes or context provided.
        You will be given:
        1. FILE_CHANGES - a set of code changes with lines marked by “+” indicating what has been added or “-” for modified.
        2. RELEVANT_CONTEXT - information about what these changes do.
        3. ORIGINAL_FILE - The original file before being modified. Use this to understand how changes affect the code. (this may be empty).

        Your tasks are:
        1. Security Review Scope
           - Review the security implications of the FILE_CHANGES, focusing on lines marked with “+.” or “-” but take into account how they interact with the whole file.
        If it is empty, ignore it.
      security_review_checks: |-
        2. What to Check
        - Look for potential security issues such as:
          - Unsafe code usage
            + Pay special attention to any `unsafe` blocks. Ensure they are justified and properly bounded.
            + Check for vulnerabilites relating to raw pointer dereferencing, FFI usage, use-after-free, and manual memory manipulation.
            + Ensure that lifetimes are correctly enforced when using references in unsafe or FFI code.
            + Be alert for transmute or lifetime erasure via raw pointers.
          - Concurrency issues
            + Watch for potential data races in `unsafe` code or improper use of synchronization primitives.
            + Specifically, check for removed `await`/`join` calls or altered locking logic that could introduce race conditions.
          - Integer overflows and underflows
          - Input validation and injection vulnerabilities
            + Look for places where user input is passed to command execution, file paths, or unsafe APIs.
          - Deserialization or parsing issues
            + If the code deserializes external input, ensure it properly validates the format and structure to prevent logic or memory vulnerabilities.
          - Hardcoded secrets
          - Insecure use of libraries
        - IMPORTANT: Rusts ownership model and borrow checker prevent many classes of bugs by design. Do not raise issues that are already statically prevented unless overridden by `unsafe` or FFI.
        - Do not report on issues that do not affect security.
      validation_review: "Validate the following Rust review for security concerns."
      snippet_security_summary: "Summarize the security implications of these Rust code changes."
      attempt_fix: "Based on the issues detected in the Rust code changes, propose a fix patch. Issues: {issues} Patch: {patch}"
      security_review_file: |-
        You are a thorough security engineer specializing in Rust.
        Always tie your identified issues directly to the evidence in FILE and RELEVANT_CONTEXT.
        Do not introduce new security conclusions that are not supported by the specific changes or context provided.
        You will be given:
        1. FILE - A source code file
        2. RELEVANT_CONTEXT - information about what these changes do.

        Your tasks are:
        1. Security Review Scope
           - Review the security implications of the FILE.
        If it is empty, ignore it.
